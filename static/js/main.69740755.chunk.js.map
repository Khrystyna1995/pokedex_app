{"version":3,"sources":["services/pokemon.js","helpers/typeColors.js","components/ShowInfo/Showinfo.js","components/ShowInfo/index.js","components/Card/Card.js","components/Card/index.js","components/NavBar/Navbar.js","components/NavBar/index.js","App.js","reportWebVitals.js","index.js"],"names":["getAllPokemon","url","a","Promise","resolve","reject","fetch","then","res","json","data","getPokemon","typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","ShowInfo","component","show","useState","showPokemonInfo","setShowPokemonInfo","v","Card","pokemon","className","types","map","type","name","stats","base_stat","weight","pokemonInfo","pokemonInfoShow","onClick","src","sprites","front_default","alt","style","backgroundColor","NavBar","App","pokemonData","setPokemonData","loadMoreUrl","setLoadMoreUrl","loading","setLoading","initialUrl","useEffect","response","next","loadPokemon","results","fetchData","loadMore","all","pokemonRecord","console","log","_pokemonData","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69740755.chunk.js","sourcesContent":["export async function getAllPokemon(url) {\n    return new Promise(((resolve, reject) =>  {\n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                resolve(data)\n            })\n    }))\n}\n\nexport async function getPokemon(url) {\n    return new Promise((resolve, reject) => {\n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                resolve(data)\n            })\n    })\n}\n","const typeColors = {\n    bug: '#729f3f',\n    dragon: '#53a4cf',\n    fairy: '#fdb9e9',\n    fire: '#fd7d24',\n    ghost: '#7b62a3',\n    ground: '#f7de3f',\n    normal: '#a4acaf',\n    pyschic: '#f366b9',\n    steel: '#9eb7b',\n    dark: '#707070',\n    electric: '#eed535',\n    fighting: '#d56723',\n    flying: '#3dc7ef',\n    grass: '#9bcc50',\n    ice: '#51c4e7',\n    poison: '#b97fc9',\n    rock: '#a38c21',\n    water: '#4592c4'\n}\n\nexport default typeColors;\n","import React, {useState} from 'react';\n\n\nfunction ShowInfo(component, show = false) {\n    const [showPokemonInfo, setShowPokemonInfo] = useState(() => show);\n    return(\n        [showPokemonInfo ? component : null, () => setShowPokemonInfo((v) => !v) ]\n    )\n}\n\nexport default ShowInfo;\n","import ShowInfo from './Showinfo';\n\nexport default ShowInfo;\n","import React, { useState } from 'react';\nimport './style.css';\nimport './media.css';\nimport typeColors from \"../../helpers/typeColors\";\nimport ShowInfo from \"../ShowInfo\";\nimport {getAllPokemon, getPokemon} from \"../../services/pokemon\";\n\nfunction Card({ pokemon }) {\n    const [pokemonData, setPokemonData] = useState([]);\n    const initialUrl = 'https://pokeapi.co/api/v2/pokemon/?limit=12';\n\n    const loadPokemon = async (data) => {\n        let _pokemonData = await Promise.all(data.map(async pokemon => {\n            let pokemonRecord = await getPokemon(pokemon.url);\n            console.log(pokemonRecord);\n            return pokemonRecord\n        }))\n\n        setPokemonData(_pokemonData)\n    }\n    const [pokemonInfo, pokemonInfoShow] = ShowInfo(\n        <div className=\"Card-info\">\n            <div>\n                <table className=\"styled-table\">\n                    <tbody>\n                    <tr>\n                        <td>Type</td>\n                        <td>{pokemon.types.map(type => {\n                            return (\n                                <div>\n                                    {type.type.name}\n                                </div>\n                            )\n                        })}</td>\n                    </tr>\n                    <tr>\n                        <td>Attack</td>\n                        <td>{pokemon.stats[1].base_stat}</td>\n                    </tr>\n                    <tr>\n                        <td>Defense</td>\n                        <td>{pokemon.stats[2].base_stat}</td>\n                    </tr>\n                    <tr>\n                        <td>HP</td>\n                        <td>{pokemon.stats[0].base_stat}</td>\n                    </tr>\n                    <tr>\n                        <td>SP Attack</td>\n                        <td>{pokemon.stats[3].base_stat}</td>\n                    </tr>\n                    <tr>\n                        <td>SP Defense</td>\n                        <td>{pokemon.stats[4].base_stat}</td>\n                    </tr>\n                    <tr>\n                        <td>Speed</td>\n                        <td>{pokemon.stats[5].base_stat}</td>\n                    </tr>\n                    <tr>\n                        <td>Weight</td>\n                        <td>{pokemon.weight}</td>\n                    </tr>\n                    <tr>\n                        <td>Total moves</td>\n                        <td>{pokemon.weight}</td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n    return (\n        <div className=\"Card\" onClick={pokemonInfoShow}>\n                <div className=\"Card_img\">\n                    <img src={pokemon.sprites.front_default} alt=\"\" />\n                </div>\n                <div className=\"Card_Name\">\n                    {pokemon.name}\n                </div>\n                <div className=\"Card_types\">\n                    {pokemon.types.map(type => {\n                        return (\n                            <div className=\"Card_type\" style={{backgroundColor: typeColors[type.type.name] }}>\n                                {type.type.name}\n                            </div>\n                        )\n                    })}\n                </div>\n            <div>\n                {pokemonInfo}\n            </div>\n        </div>\n\n\n    )\n}\n\nexport default Card;\n","import Card from './Card';\n\nexport default Card;\n","import React from 'react';\nimport './style.css';\n\nfunction NavBar() {\n   return(\n       <div className=\"Navbar\">\n           Pokedex\n       </div>\n   )\n}\n\nexport default NavBar;\n","import NavBar from './Navbar';\n\nexport default NavBar;\n","import React, { useState, useEffect } from 'react';\nimport {getAllPokemon, getPokemon} from \"./services/pokemon\";\nimport Card from './components/Card';\nimport NavBar from \"./components/NavBar\";\nimport './App.css';\nimport './css/media.css'\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([]);\n  const [loadMoreUrl, setLoadMoreUrl ] = useState('');\n  const [loading, setLoading] = useState(true);\n  const initialUrl = 'https://pokeapi.co/api/v2/pokemon/?limit=12';\n\n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(initialUrl);\n      setLoadMoreUrl(response.next);\n      await loadPokemon(response.results);\n      setLoading(false);\n    }\n    fetchData();\n  }, []);\n\n  const loadMore = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(loadMoreUrl);\n    await loadPokemon(data.results)\n    setLoadMoreUrl(data.next);\n    setLoading(false);\n  }\n\n  const loadPokemon = async (data) => {\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      let pokemonRecord = await getPokemon(pokemon.url);\n      console.log(pokemonRecord);\n      return pokemonRecord\n    }))\n\n    setPokemonData(_pokemonData)\n  }\n  return (\n    <div>\n      {loading ? <h1>Loading...</h1>: (\n          <>\n          <NavBar/>\n          <div className=\"container\">\n            {pokemonData.map((pokemon, i) => {\n              return <Card key={i} pokemon={pokemon}/>\n            })}\n          </div>\n            <div className=\"btn\">\n              <button onClick={loadMore}> Load More </button>\n            </div>\n\n          </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}